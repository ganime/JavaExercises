package undo;

import junit.framework.Assert;
import junit.framework.TestCase;

import org.junit.Test;

import undo.Change;
import undo.ChangeFactory;
import undo.ChangeFactoryImpl;
import undo.Document;
import undo.DocumentImpl;
import undo.UndoManager;
import undo.UndoManagerFactory;
import undo.UndoManagerFactoryImpl;

public class UndoManagerTest extends TestCase {
	//create insertions and deletions
	Change i1;
	Change i2;
	Change i3;
	Change i4;
	Change d1;

	UndoManagerFactory undoManagerFactory;
	UndoManager undoManager;
	Document doc;

	@Override
	public void setUp() {
		doc = new DocumentImpl();
		undoManagerFactory = new UndoManagerFactoryImpl();
		undoManager = undoManagerFactory.createUndoManager(doc, 3);

		ChangeFactory changeFactory = new ChangeFactoryImpl();
		i1 = changeFactory.createInsertion(0, "Hello", 0, "Hello".length());
		i2 = changeFactory.createInsertion(5, ",", 0, ",".length());
		i3 = changeFactory.createInsertion(6, "world", 0, "world".length());
		i4 = changeFactory.createDeletion(0, "Hello", 0, 0);
	}

	@Test
	public void testBufferCreation() {
		assertEquals(3, undoManager.bufferCapacity());
		assertEquals(0, undoManager.bufferSize());
	}

	@Test
	public void testBufferAdd() {
		undoManager.registerChange(i1);
		assertEquals(1, undoManager.bufferSize());

		undoManager.registerChange(i2);
		assertEquals(2, undoManager.bufferSize());

		undoManager.registerChange(i3);
		assertEquals(3, undoManager.bufferSize());

		undoManager.registerChange(i4);
		assertEquals(3, undoManager.bufferSize());
	}

	@Test
	public void testInsertion() {
		i1.apply(doc);
		assertEquals(doc.getContent(), "Hello");

		i2.apply(doc);
		assertEquals(doc.getContent(), "Hello,");

		i3.apply(doc);
		assertEquals(doc.getContent(), "Hello,world");

		System.out.println(undoManager);
	}

	@Test
	public void testInsertionUndoRedo() {
		i1.apply(doc);
		assertEquals(doc.getContent(), "Hello");
		undoManager.undo();
		assertEquals(doc.getContent(), "");
		undoManager.redo();
		assertEquals(doc.getContent(), "Hello");
		try {
			undoManager.redo();
			fail("Should got an exception");
		} catch (IllegalStateException e) {
			// success
		} catch (Exception e) {
			fail("");
		}
		i2.apply(doc);
		i3.apply(doc);
		assertEquals(doc.getContent(), "Hello,world");
		
		i4.apply(doc);
		assertEquals(doc.getContent(), ",world");
		undoManager.undo();
		assertEquals(doc.getContent(), "Hello,world");
	}	
	
	@Test
	public void testUndoSingleItem() {
		i1.apply(doc);

		Change u1 = undoManager.currentChange();
		assertEquals(i1, u1);
		undoManager.undo();

		Change u2 = undoManager.currentChange();
		Assert.assertNull(u2);
	}

	@Test
	public void testUndoMultipleItems() {
		i1.apply(doc);
		i2.apply(doc);

		Change u2 = undoManager.currentChange();
		assertEquals(i2, u2);
		undoManager.undo();

		Change u1 = undoManager.currentChange();
		assertEquals(i1, u1);
		undoManager.undo();

		Change u3 = undoManager.currentChange();
		Assert.assertNull(u3);
	}

	@Test
	public void testRedoSingleItem() {
		i1.apply(doc);

		// Initially it should not be possible to redo.
		assertFalse(undoManager.canRedo());

		// Undo should be possible
		assertTrue(undoManager.canUndo());

		undoManager.undo();
		// Redo should now be possible
		assertTrue(undoManager.canRedo());
		assertFalse(undoManager.canUndo());

		undoManager.redo();
		Change r1 = undoManager.currentChange();
		assertEquals(i1, r1);
	}

	@Test
	public void testUndoRedoMultipleTimes() {
		i1.apply(doc);
		i2.apply(doc);

		// 2 undo and 2 redo done repeatedly.
		for (int i = 0; i < 5; i++) {
			// 2 Undos
			Change u2 = undoManager.currentChange();
			assertEquals(i2, u2);
			undoManager.undo();

			Change u1 = undoManager.currentChange();
			assertEquals(i1, u1);
			undoManager.undo();

			// 2 Redos
			undoManager.redo();
			assertEquals(i1, undoManager.currentChange()); 
			undoManager.redo();
			assertEquals(i2, undoManager.currentChange());
		}
	}

	// If an operation is made after an undo, we can not redo the prior changes.
	public void testAddAfterUndoRedo() {
		i1.apply(doc);
		i2.apply(doc);
		i3.apply(doc);

		// 2 Undo
		undoManager.undo();
		undoManager.undo();

		// Now add another change
		i4.apply(doc);
		// Now we should have last change C4 at the beginning and C1 (first
		// change)
		// in the end and C2, C3 discarded.
		assertEquals(i4, undoManager.currentChange());
		undoManager.undo();
		assertEquals(i1, undoManager.currentChange());

		// Now do 1 redo
		undoManager.redo();
		assertEquals(i4, undoManager.currentChange());
	}
}
