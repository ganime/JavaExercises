package undo;

import java.util.LinkedList;

public class UndoManagerImpl implements UndoManager {

	// it might be better to put the undoRedoBuffer in its on class.
	private final LinkedList<Change> undoRedoBuffer = new LinkedList<Change>();
	private final int bufferCapacity;
	private final Document doc;
	int pointer = 0;

	public UndoManagerImpl(Document doc, int bufferSize) {
		this.bufferCapacity = bufferSize;
		this.doc = doc;
	}

	@Override
	public int bufferCapacity() {
		return bufferCapacity;
	}

	@Override
	public int bufferSize() {
		return undoRedoBuffer.size();
	}

	/**
	 * Registers a new change in this undo manager. If the buffer size of the
	 * undo manager is filled, replace the oldest change with the one provided
	 * to this method.
	 * /
	@Override
	public void registerChange(Change change) {
		// If we have made undo - redo operations before, we flush the buffer
		// until the
		// currentChange (This will save changes older than currentChange)
		if (pointer > 0) {
			for (int i = 0; i < pointer; i++) {
				undoRedoBuffer.removeFirst();
			}
			// After each add operation, pointer reset to zero (moved to first
			// item of list)
			pointer = 0;
		}
		// If we are at the limit of the buffer, discard one change from end.
		if (undoRedoBuffer.size() == bufferCapacity) {
			undoRedoBuffer.removeLast();
		}
		// always add to the top of the list
		undoRedoBuffer.addFirst(change);
	}

	@Override
	public boolean canUndo() {
		return (pointer < bufferSize());
	}

	@Override
	public void undo() {
		if (!canUndo())
			throw new IllegalStateException("Undo not posibble");
		Change latestChange = undoRedoBuffer.get(pointer);
		latestChange.revert(doc);
		pointer++;
	}

	@Override
	public boolean canRedo() {
		return (pointer > 0);
	}

	@Override
	public void redo() {
		if (!canRedo())
			throw new IllegalStateException("Redo not possible");
		Change latestChange = undoRedoBuffer.get(--pointer);
		latestChange.apply(doc);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("------------------\n");
		sb.append("UndoRedoBuffer:\n");
		sb.append("\n");
		for (Change change : undoRedoBuffer) {
			sb.append(change.toString());
			sb.append("\n");
		}
		sb.append("------------------");
		return sb.toString();
	}

	@Override
	public Change currentChange() {
		if (pointer < bufferSize())
			return undoRedoBuffer.get(pointer);
		return null;
	}
}