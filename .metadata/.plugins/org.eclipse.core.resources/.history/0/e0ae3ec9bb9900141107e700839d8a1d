package undo;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Stack;

public class UndoManagerImpl implements UndoManager {

	LinkedList<Change> undoRedoStack = new LinkedList<Change>();
	int pointer = 0;	
	private int stackSize;
	private Document doc;
	
	public UndoManagerImpl (Document doc, int bufferSize){
		this.stackSize = bufferSize;
		this.doc = doc;
	}

	@Override
	public void registerChange(Change change) {
		if (undoRedoStack.size() == stackSize) {
			undoRedoStack.set(0,change);	
		}
		else {
			undoRedoStack.add(change);
			pointer++;
		}
		}
	}

	@Override
	public boolean canUndo() {
		return true;
	}

	@Override
	public void undo() {
		ListIterator<Change> iterator = undoRedoStack.listIterator(undoRedoStack.size());
		if(iterator.hasPrevious()) {
			Change latestChange = iterator.previous();
			latestChange.revert(doc);
		}
	}

	@Override
	public boolean canRedo() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void redo() {
		if(iterator.hasNext()) {
			Change latestChange = iterator.next();
			latestChange.apply(doc);
		}
	}

}
